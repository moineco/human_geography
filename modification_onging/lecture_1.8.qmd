# Population distribution of Alaska

Credit: Reproducible Research Techniques for Synthesis: Matt Jones

The sf package is an R implementation of Simple Features. This package incorporates:

-   a new spatial data class system in R
-   functions for reading and writing data
-   tools for spatial operations on vectors

Most of the functions in this package starts with prefix st\_ which stands for spatial and temporal.

Our goal is to use a shapefile of Alaska regions and data on population in Alaska by community to create a map.

Load necessary packages with `pacman` package manager

```{r}
#| code-fold: false
#| warning: false
#| message: false
pacman::p_load(sf, dplyr, ggplot2, scales, ggmap)
```

-   Plot the shapefile of Alaska

```{r}
#| code-fold: false
## Read in shapefile using sf
ak_regions <- read_sf("data/shapefile/alaska/ak_regions_simp.shp")
plot(ak_regions)  
```

-   Examine it's class.

```{r}
#| code-fold: false
class(ak_regions)
```

-   See the data structure

```{r}
#| code-fold: false
head(ak_regions)
```

-   View what crs is set by using the function st_crs

```{r}
#| code-fold: false
st_crs(ak_regions)
```

-   This data has a greographic coordinate system (WGS84) with no projection. Let us use the Alaska Albers projection, with an EPSG code of 3338.

```{r}
#| code-fold: false
ak_regions_3338 <- ak_regions %>%
  st_transform(crs = 3338)

st_crs(ak_regions_3338)
```

-   Plot it with Alaska Albers projection

```{r}
#| code-fold: false
plot(ak_regions_3338)
```

```{r}
#| code-fold: false
summary(ak_regions_3338)
```

-   Since sf objects are dataframes, they play nicely with packages in the tidyverse. Here are a couple of simple examples:

```{r}
#| code-fold: false
ak_regions_3338 %>%
  select(region)
```

```{r}
#| code-fold: false
ak_regions_3338 %>%
  filter(region == "Southeast")
```

-   How many people live in each of these Alaska regions? Let us check the data:

```{r}
#| code-fold: false
pop <- read.csv("data/csv/alaska_population.csv")
```

-   Although it isn't said anywhere explicitly in the file, let's assume that the coordinate system used to reference the latitude longitude coordinates is WGS84, which has a crs number of 4236.

```{r}
#| code-fold: false
pop_4326 <- st_as_sf(pop, 
                  coords = c('lng', 'lat'),
                  crs = 4326,
                  remove = F)

head(pop_4326)
```

```{txt}
pop_joined <- st_join(pop_4326, ak_regions_3338, join = st_within)
```

-   This gives an error!

```{r}
#| code-fold: false
pop_3338 <- st_transform(pop_4326, crs = 3338)
```

-   Turns out, this won't work right now because our coordinate reference systems are not the same. Luckily, this is easily resolved using st_transform, and projecting our population object into Alaska Albers.

```{r}
#| code-fold: false
pop_joined <- st_join(pop_3338, ak_regions_3338, join = st_within)

head(pop_joined)
```

```{r}
#| code-fold: false
pop_region <- pop_joined %>% 
  as.data.frame() %>% 
  group_by(region) %>% 
  summarise(total_pop = sum(population))

head(pop_region)
```

-   And use a regular left_join to get the information back to the Alaska region shapefile.

```{r}
#| code-fold: false
pop_region_3338 <- left_join(ak_regions_3338, pop_region)
```

-   Plot to check

```{r}
#| code-fold: false
#plot to check
plot(pop_region_3338["total_pop"])
```

-   Say we want to calculate the population by Alaska management area, as opposed to region.

```{r}
#| code-fold: false
pop_mgmt_338 <- pop_region_3338 %>% 
  group_by(mgmt_area) %>% 
  summarize(total_pop = sum(total_pop))

plot(pop_mgmt_338["total_pop"])
```

-   Notice that the region geometries were combined into a single polygon for each management area. If we don't want to combine geometries, we can specifcy do_union = F as an argument.

```{r}
#| code-fold: false
pop_mgmt_3338 <- pop_region_3338 %>% 
  group_by(mgmt_area) %>% 
  summarize(total_pop = sum(total_pop), do_union = F)

plot(pop_mgmt_3338["total_pop"])
```

```{txt}
write_sf(pop_region_3338, "shapefiles/ak_regions_population.shp", delete_layer = TRUE)
```

-   Visualize with ggplot. It now has integrated functionality to plot sf objects using geom_sf(). We can plot sf objects just like regular data.frames using geom_sf.

```{r}
#| code-fold: false
ggplot(pop_region_3338) +
  geom_sf(aes(fill = total_pop)) +
  theme_bw() +
  labs(fill = "Total Population") +
  scale_fill_continuous(low = "khaki", high =  "firebrick", labels = comma)
```

-   The rivers shapefile is a simplified version of Jared Kibele and Jeanette Clark.

```{r}
#| code-fold: false
rivers_3338 <- read_sf("data/shapefile/alaska/ak_rivers_simp.shp")
st_crs(rivers_3338)
```

-   Note that although no EPSG code is set explicitly, with some sluething we can determine that this is EPSG:3338. This site is helpful for looking up EPSG codes.

```{r}
#| code-fold: false
#| warning: false
ggplot() +
  geom_sf(data = pop_region_3338, aes(fill = total_pop)) +
  geom_sf(data = rivers_3338, aes(size = StrOrder), color = "black") +
  geom_sf(data = pop_3338, aes(), size = .5) +
  scale_size(range = c(0.01, 0.2), guide = F) +
  theme_bw() +
  labs(fill = "Total Population") +
  scale_fill_continuous(low = "khaki", high =  "firebrick", labels = comma)
```
