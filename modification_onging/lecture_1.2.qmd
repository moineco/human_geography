# Processing shapefiles

## Shapefile in GIS

Shapefile is important for GIS (Geographic Information System) due to its widespread use and compatibility with various software applications. Here are a few key reasons:

**Data Representation:** Shapefile is a popular file format for storing and sharing geospatial data. It allows the representation of complex geographic features such as points, lines, and polygons, along with their attributes.

**Interoperability:** Shapefile is supported by a wide range of GIS software, making it highly inter-operable. It enables data exchange between different systems and facilitates collaboration among users who may be using different GIS platforms.

**Attribute Management:** Shapefile supports the storage of attribute data associated with geographic features. This allows for the integration of non-spatial information, such as population, land use, or temperature, with spatial data, enabling comprehensive analysis and visualization.

**Compact and Efficient:** Shapefiles are relatively small in size compared to other data formats, making them efficient for storing and transferring geospatial data. They are also capable of handling large data-sets without compromising performance.

**Historical Significance:** Shapefile has been in use for several decades and has become a standard in the GIS community. Many legacy datasets and applications are based on shapefiles, making them crucial for historical data preservation and compatibility.

## Shapefile and R

Shapefile is commonly used with R, a powerful programming language and software environment for statistical computing and graphics. Here's why shapefile is often preferred for use with R:

**Native Support:** R has built-in support for reading, writing, and manipulating shapefiles. The "sf" package in R provides functions specifically designed for working with spatial data, including shapefiles. This native support simplifies the process of loading shapefiles into R and performing various spatial analyses.

**Visualization Capabilities:** R offers extensive visualization capabilities for geospatial data. Packages like "ggplot2" and "leaflet" enable you to create high-quality maps and interactive visualizations using shapefiles as the data source. R's flexibility in customizing plots allows for advanced geospatial visualizations and exploration.

> While shapefile is a common choice for working with spatial data in R, it's important to note that R also supports other geospatial file formats, such as GeoJSON and Geopackage. These formats may offer advantages like improved data compression, support for more advanced spatial features, and better inter-operability with certain software ecosystems.

-   Use `pacman` to manage the R packages

-   Using `packman` package enables us to install and load a package without typing `install.packges()` at Console on your RStudio

-   You need to type the following command at Console on your RStudio

```{txt}
install.packages("pacman")
```

-   The installation of necessary R packages:

```{r message=FALSE, warning=FALSE}
#| code-fold: false
pacman::p_load(sf, tidyverse, rnaturalearth)
```

## Using `sf` package to make map

-   Create data for world

```{r}
#| code-fold: false
world <- ne_countries(scale = "small", returnclass = "sf")
```

-   First we use the familiar ggplot2 syntax. Like in any other ggplot, we have an x and a y axis, though in this case the correspond to longitude and latitude. Knowing this, we can use other ggplot2 commands to make our map more complex. Below we draw a horizontal line where the `yintercept` is at the equator.

```{r}
#| code-fold: false
world %>% 
  ggplot() + 
  geom_sf() +
  geom_hline(yintercept = 0, linetype = "dashed") 
```

-   World map with income groups

```{r}
#| code-fold: false
world %>% 
  mutate(income_grp = factor(income_grp, ordered = T)) %>% 
  ggplot() + 
  geom_sf(aes(fill = income_grp)) +
  theme_void() +
  theme(legend.position = "top") +
  labs(fill = "Income Group:") +
  guides(fill=guide_legend(nrow=2, byrow=TRUE))
```

## Using `Shapefile` to make map

-   First we will download the available shapefile of Japan from following website:

https://data.humdata.org/dataset/cod-ab-jpn?

-   Save the downloaded data into your GIS project inside a folder name `data`.

-   We will read the shapefile and provide a name `shapefile_jpn`.

-   We will plot the shapefile named `shapefile_jpn`.

```{r message=FALSE, warning=FALSE}
#| code-fold: false
shapefile_jpn <- read_sf("data/jpn_shp_adm/jpn_admbnda_adm1_2019.shp")
plot(shapefile_jpn)
```
