# Human geography lab_Annex 3

## European regions with `naturalearth` data

```{r}
#| message: false
library(tidyverse)
library(sf)
library(knitr)
```

-   naturalearthdata.com provides many open-source maps. I decided to select the world map with country borders on a 1:10m scale (can be found <https://www.naturalearthdata.com/downloads/10m-cultural-vectors/>)

```{r, results='hide'}
#| message: false
map_data <- st_read("data/shapefile/ne_10m_admin_0_countries")
```

-   The map_data uses data.frames for its features and saves the geometric features as a list in the column geometry. We can now easily explore the data in map_data, e.g.,The map_data uses data.frames for its features and saves the geometric features as a list in the column geometry. We can now easily explore the data in map_data, e.g.,

```{r}
features_map_data <- map_data %>%
    as_tibble() %>%
    select(-geometry) %>%
    head(10)

kable(features_map_data)
```

-   For this tutorial we want to focus on a European countries, hence we need to filter the data to only contain the European countries’ info. Fortunately, the map_data contains a feature CONTINTENT, so we can easily filter out the unwanted countries.

```{r}
#| warning: false
europe_map_data <- map_data %>%
    select(NAME, CONTINENT, SUBREGION, POP_EST) %>%
    filter(CONTINENT == "Europe")
```

-   Lets try to plot a map of European countries. New versions of ggplot2 contain a function geom_sf which supports plotting sf objects directly, so lets try it…

```{r}
ggplot(europe_map_data) + geom_sf() +
    theme_minimal()
```

-   That does not seem to work… the reason is that, even though we removed the data of non European countries, we never changed the bbox setting of our data. The bbox object sets the longitude and latitude range for our plot, which is still for the whole Europe. To change this we can use the st_crop function as

```{r}
#| warning: false
europe_map_data <- europe_map_data %>%
    st_crop(xmin=-25, xmax=55, ymin=35, ymax=71)
```

```{r}
ggplot(europe_map_data) + geom_sf() +
    theme_minimal()
```

-   If you’re familiar with the ggplot2 workflow, it is now easy to construct the aesthetic mappings like you’re used to. Our map_data contains a feature SUBREGION and Europe is divided into Northern, Eastern, Southern and Western Europe. We can easily visualize this in our European map as

```{r}
ggplot(europe_map_data) + geom_sf(aes(fill=SUBREGION)) +
    theme_minimal()
```
