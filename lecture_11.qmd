# Human geography lab_3

-   Load all necessary packages

```{r}
#| warning: false
#| message: false
#| code-fold: false
pacman::p_load(tidyverse, maps, countrycode, rnaturalearth, sf)
```

-   We use free data on world map: Natural Earth

-   Using `rnaturalearth` package, we get the data necessary to draw a world map

-   Name the data world_map

```{r message=FALSE, warning=FALSE}
#| code-fold: false
global_map <- ne_countries(scale = "small", returnclass = "sf")
```

-   Show the list of variables included global_map

```{r message=FALSE, warning=FALSE}
#| code-fold: false
names(global_map)
```

-   We see 169 variables
-   Check the class of global_map
-   If you want to see the data of GDP for each country, use following code:

```{r}
#| code-fold: false
global_map %>% 
select(sovereignt, gdp_md, gdp_year) %>% 
DT::datatable()
```

-   World is a GeoDataFrame with the following columns:

`pop_est`: Contains a population estimate for the country

`continent`: The country's continent

`name_en`: The country's name in English

`iso_a3`: The country's 3 letter abbreviation (we made this the index)

`gdp_md`: A country's GDP in million dollar

`geometry`: A POLYGON for each country (we will learn more about these soon)

```{r}
#| code-fold: false
class(global_map)
```

-   global_map has two classes: sf & data.frame

## Global GDP map

```{r message=FALSE, warning=FALSE}
#| code-fold: false
global_map %>% 
  ggplot() +
  geom_sf(aes(fill = gdp_md)) +
  scale_fill_gradient(low = "white", high = "green") +
  labs(fill = "GDP") +
  theme_minimal(base_family = "HiraKakuProN-W3") +
  theme(legend.position = "bottom")
```

-   Let's change the color and the position of legend.

```{r message=FALSE, warning=FALSE}
#| code-fold: false
global_map %>% 
  ggplot() +
  geom_sf(aes(fill = gdp_md)) +
  scale_fill_gradient(low = "gray", high = "blue") +
  labs(fill = "GDP_2019") +
  theme_minimal(base_family = "HiraKakuProN-W3") +
  theme(legend.position = "left")
```

## Regional GDP map

-   GDP of European countries in 2019

```{r message=FALSE, warning=FALSE}
#| code-fold: false
global_map %>% 
  ggplot() +
  geom_sf(aes(fill = gdp_md)) +
  scale_fill_gradient(low = "white", high = "green") +
  labs(fill = "GDP_Europe") +
  coord_sf(xlim = c(-10, 45), ylim = c(35, 60)) +
  theme_minimal(base_family = "HiraKakuProN-W3") +
  theme(legend.position = "left")
```

-   GDP of African countries in 2019

```{r message=FALSE, warning=FALSE}
#| code-fold: false
global_map %>% 
  ggplot() +
  geom_sf(aes(fill = gdp_md)) +
  scale_fill_gradient(low = "white", high = "green") +
  labs(fill = "GDP_Africa") +
  coord_sf(xlim = c(-30, 60), ylim = c(-40, 40)) +
  theme_minimal(base_family = "HiraKakuProN-W3") +
  theme(legend.position = "left")
```

## World and continents with `sf`

We need the following packages to deal with this lecture:

```{r}
#| code-fold: false
library(sf)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
```

-   Alternatively, you can use the `pacman` package manager to load necessary R packages from below:

```{txt}
pacman::p_load(sf, tidyverse, rnaturalearth)
```

The above command will install all dependencies required to reproduce the entire lecture

-   Use the package `sf`

-   We will use the world dataset provided by `spData`, to show what sf objects are and how they work. `world` is an 'sf data frame' containing spatial and attribute columns, the names of which are returned by the function names() (the last column in this example contains the geographic information):

```{r}
#| code-fold: false
#| warning: false
#| message: false
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
names(world)
```

-   Make sophistocated and professional looking map of World

```{r}
#| code-fold: false
#| warning: false
#| message: false
world.plot = ggplot() +               
  geom_sf(data = world)
world.plot 
```

-   We will begin to get to know the basics of geographic data in R by using the "world" dataset in the package.

-   First let's see what information is in the "world" dataset. Get the names of the variables in the world dataset.

-   Filter the population and GDP data from World map for better understanding the data structure.

-   Plot the GDP percapita map of the world:

-   Prepare Africa map by highlighting Zambia

```{r}
#| code-fold: false
#| warning: false
#| message: false
# Select just the continent of Africa
africa <- world %>% 
  filter(region_un %in% "Africa")
```

-   Check the type of data

```{r}
#| code-fold: false
#| warning: false
#| message: false
class(africa)
names(africa)
```

-   Make professional looking map of `Asia`

```{r}
#| code-fold: false
#| warning: false
#| message: false
asia <- world[which(world$continent == "Asia"),]
asia.plot = ggplot() +               
  geom_sf(data = asia)  
asia.plot 
```

-   Make professional looking map of `Africa`

```{r}
#| code-fold: false
#| warning: false
#| message: false
africa <- world[which(world$continent == "Africa"),]
africa.plot = ggplot() +               
  geom_sf(data = africa)  
africa.plot 
```

-   Make professional looking map of `Europe`

```{r}
#| code-fold: false
#| warning: false
#| message: false
europe <- world[which(world$continent == "Europe"),]
ggplot(europe) +
  geom_sf() +
  coord_sf(xlim = c(-25,50), ylim = c(35,70), expand = FALSE)
```

-   Make professional looking map of `Oceania`

```{r}
#| code-fold: false
#| warning: false
#| message: false
oceania <- world[which(world$continent == "Oceania"),]
ggplot(oceania) +
  geom_sf() +
  coord_sf(xlim = c(105,180), ylim = c(-50,0), expand = FALSE)
```

-   Make professional looking map of `North America`

```{r}
#| code-fold: false
#| warning: false
#| message: false
north_america <- world[which(world$continent == "North America"),]
ggplot(north_america) +
  geom_sf() +
  coord_sf(xlim = c(-180,-15), ylim = c(0,90), expand = FALSE)
```

## Using `Shapefile` to make map

-   Load the `shapefile` of Japan's administrative divisions

```{r, results='hide'}
#| code-fold: false
#| message: false
jp0_shp <- st_read("data/shapefile/jp_adm0_shp/jpn_admbnda_adm0_2019.shp")
jp1_shp <- st_read("data/shapefile/jp_adm1_shp/jpn_admbnda_adm1_2019.shp") 
jp2_shp <- st_read("data/shapefile/jp_adm2_shp/jpn_admbnda_adm2_2019.shp") 
```

-   Observe the data inside the shape file of `adm0`

```{r, results='hide'}
#| code-fold: false
#| message: false
jp0_shp # for admin level 0
jp1_shp # for admin level 1
jp2_shp # for admin level 2
```

-   Check the geographic coordinate system of your `adm0` shapefile

```{r, results='hide'}
#| code-fold: false
#| message: false
st_crs(jp0_shp) # for admin level 0
st_crs(jp1_shp) # for admin level 1
st_crs(jp2_shp) # for admin level 2
```

-   Plot the map of Japan admin 0

```{r, warning=FALSE}
#| code-fold: false
ggplot(jp0_shp) +
  geom_sf()
```

-   Change the boundary color and fill it with white color.

```{r}
ggplot(jp0_shp) +
    geom_sf(color = "blue", fill = "white", lwd = 0.07)
```

-   We can try the `aes()` function to improve the visual of the ADM0. Aesthetics are used to bind plotting parameters to your data. The `aes()` function defines which variables you want to plot, and which plot parameters to map them to.

```{r}
ggplot(jp0_shp) +
    geom_sf(aes(fill = ADM0_PCODE),  show.legend = FALSE)
```

-   Plot the map of Japan admin 1

```{r, warning=FALSE}
#| code-fold: false
ggplot(jp1_shp) +
  geom_sf()
```

-   Lets change the color of boundary and fill.

```{r}
ggplot(jp1_shp) +
    geom_sf(color = "blue",  fill = "white", lwd = 0.07)
```

-   We can try the `aes()` function to improve the visual of the ADM1.

```{r}
ggplot(jp1_shp) +
    geom_sf(aes(fill = ADM1_PCODE),  show.legend = FALSE)
```

-   Plot the map of Japan admin 2

```{r, warning=FALSE}
#| code-fold: false
ggplot(jp2_shp) +
  geom_sf()
```

-   Lets change the color of boundary and fill

```{r}
ggplot(jp2_shp) +
    geom_sf(color = "blue",  fill = "white", lwd = 0.07)
```

-   We can try the `aes()` function to improve the visual of the ADM2.

```{r}
ggplot(jp2_shp) +
    geom_sf(aes(fill = ADM2_PCODE),  show.legend = FALSE)
```
